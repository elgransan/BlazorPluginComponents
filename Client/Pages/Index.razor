@page "/"
@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using System.Runtime.Loader
@using System.IO;
@using System.Text
@using System.IO.Compression
@inject HttpClient Http
@inject IJSRuntime jsRuntime;
@inject NavigationManager MyNavigationManager

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<Component1></Component1>

@if (componentType != null)
{
	<DynamicComponent Type="@componentType" />
}

<input type="text" @bind="component2" />
<InputFile OnChange="@LoadFiles" multiple />
<button type="button" class="btn btn-primary" @onclick="ConfirmUpdate">Upload</button>

@foreach (var component in components)
{
	if (component != null)
	{
		<DynamicComponent Type="@component" />
	}
}

@code
{
	private Type? componentType;
	private List<Type?> components = new();
	private string component2 = "RazorClassLibrary3.Component3";
	private List<IBrowserFile> files = new();

	protected override async Task OnInitializedAsync()
	{
		try {
			var componentPackage = "RazorClassLibrary2";
			var component = "Component2";
			using var stream = await Http.GetStreamAsync($"{MyNavigationManager.BaseUri}/{componentPackage}/{componentPackage}.dll");
			using var streamPdb = await Http.GetStreamAsync($"{MyNavigationManager.BaseUri}/{componentPackage}/{componentPackage}.pdb");
			var assembly = AssemblyLoadContext.Default.LoadFromStream(stream, streamPdb);
			componentType = assembly.GetType(componentPackage + "." + component);
			var interop = new Interop(jsRuntime);
			await interop.IncludeLink("", "stylesheet", $"/{componentPackage}/{componentPackage}.styles.css", "text/css", "", "anonymous", "");
		}
		catch(Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private void LoadFiles(InputFileChangeEventArgs e)
	{
		files = e.GetMultipleFiles().ToList();
	}

	private async void ConfirmUpdate()
	{
		var interop = new Interop(jsRuntime);

		try {
			foreach(var file in files)
			{
				if (file.Name.EndsWith(".dll"))
				{
					using MemoryStream ms = new();
					await file.OpenReadStream().CopyToAsync(ms);
					var bytes = ms.ToArray();

					var pdbName = file.Name.Replace(".dll", ".pdb");
					var pdbFile = files.FirstOrDefault(s => s.Name == pdbName);
					if (pdbFile != null)
					{
						using MemoryStream mspdb = new();
						await pdbFile.OpenReadStream().CopyToAsync(mspdb);
						var bytespdb = ms.ToArray();
						var assembly = Assembly.Load(bytes, bytespdb);
						components.Add(assembly.GetType(component2));
					}
					else
					{
						var assembly = Assembly.Load(bytes);
						components.Add(assembly.GetType(component2));
					}
				}
				else if(file.Name.EndsWith(".css"))
				{
					using StreamReader ms = new(file.OpenReadStream());
					var css = await ms.ReadToEndAsync();
					await interop.AddLink(css);
				}
				else if(file.Name.EndsWith(".nupkg"))
				{
					using MemoryStream ms = new();
					await file.OpenReadStream().CopyToAsync(ms);
					var bytes = ms.ToArray();
					LoadNuget(bytes);
				}
			}
			StateHasChanged();
		}
		catch(Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private async void LoadNuget(byte[] nugetFile)
	{
		var interop = new Interop(jsRuntime);
		using ZipArchive archive = new ZipArchive(new MemoryStream(nugetFile));

		var dlls = new Dictionary<string, byte[]>();
		var pdbs = new Dictionary<string, byte[]>();
		var ccss = new Dictionary<string, byte[]>();
		var jss = new Dictionary<string, byte[]>();
		var contents = new Dictionary<string, byte[]>();

		// Read all 
		foreach (ZipArchiveEntry entry in archive.Entries)
		{
			using var memoryStream = new MemoryStream();
			entry.Open().CopyTo(memoryStream);
			byte[] file = memoryStream.ToArray();
			switch (Path.GetExtension(entry.FullName))
			{
				case ".dll":
					dlls.Add(entry.FullName, file);
					break;
				case ".pdb":
					pdbs.Add(entry.FullName, file);
					break;
				case ".css":
					ccss.Add(entry.FullName, file);
					break;
				case ".js":
					jss.Add(entry.FullName, file);
					break;
				case ".png":
				case ".jpeg":
				case ".jpg":
				case ".gif":
					contents.Add(entry.FullName, file);
					break;
			}
		}
		
		// Load CSSs
		foreach(var ccs in ccss)
		{
			string result = ASCIIEncoding.UTF8.GetString(ccs.Value);
			await interop.AddLink(result);
		}

		// Load JSs
		foreach(var js in jss)
		{
			string result = ASCIIEncoding.UTF8.GetString(js.Value);
			await interop.AddScript(result);
		}

		// Load component
		foreach (var item in dlls)
		{
			if (pdbs.ContainsKey(item.Key))
			{
				var assembly = Assembly.Load(item.Value, pdbs[item.Key]);
				components.Add(assembly.GetType(component2));
			}
			else
			{
				var assembly = Assembly.Load(item.Value);
				components.Add(assembly.GetType(component2));
			}
		}
    }
}
